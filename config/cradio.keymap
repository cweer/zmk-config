// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_POINTING_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5

// https://zmk.dev/docs/development/hardware-integration/soft-off-setup?advanced-methods=wakeup&kscan-type=dkscan

/ {
    keys {
        compatible = "gpio-keys";

        soft_off_gpio_key: soft_off_gpio_key { gpios = <&gpio1 6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; };
    };

    wakeup_scan: wakeup_scan {
        compatible = "zmk,kscan-gpio-direct";
        input-keys = <&soft_off_gpio_key>;
        wakeup-source;
    };

    side_band_behavior_triggers: side_band_behavior_triggers {
        compatible = "zmk,kscan-sideband-behaviors";
        kscan = <&wakeup_scan>;
        auto-enable;
        wakeup-source;
    };

    soft_off_wakers {
        compatible = "zmk,soft-off-wakeup-sources";
        wakeup-sources = <&wakeup_scan>;
    };
};

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            require-prior-idle-ms = <75>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <8 9>;
            require-prior-idle-ms = <75>;
        };

        lctrl {
            bindings = <&sk LCTRL>;
            key-positions = <11 12>;
            require-prior-idle-ms = <75>;
        };

        lalt {
            bindings = <&sk LALT>;
            key-positions = <20 21>;
            require-prior-idle-ms = <75>;
        };

        lctrlalt {
            bindings = <&sk LA(LCTRL)>;
            key-positions = <1 2 3>;
            require-prior-idle-ms = <75>;
        };

        lgui {
            bindings = <&sk LGUI>;
            key-positions = <22 23>;
            require-prior-idle-ms = <75>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <29 28>;
            require-prior-idle-ms = <75>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <19 18>;
            require-prior-idle-ms = <75>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <11 13 12>;
            require-prior-idle-ms = <75>;
        };
    };

    macros {
        highlight_line: highlight_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "HIGHLIGHT_LINE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home_layer {
            display-name = "HOME";
            bindings = <
&kp Q  &kp W  &kp E  &kp R      &kp T         &kp Y        &kp U        &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F      &kp G         &kp H        &kp J        &kp K      &kp L    &kp APOS
&kp Z  &kp X  &kp C  &kp V      &kp B         &kp N        &kp M        &kp COMMA  &kp DOT  &kp SLASH
                     &lt 3 TAB  &kp LSHIFT    &lt 1 SPACE  &lt 2 ENTER
            >;
        };

        nav_layer {
            display-name = "NAV";
            bindings = <
&trans   &trans    &trans     &trans   &trans     &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans
&kp DEL  &kp CAPS  &kp PSCRN  &kp INS  &trans     &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &reset
&trans   &trans    &trans     &trans   &trans     &kp HOME  &kp PG_DN      &kp PG_UP    &kp END    &bootloader
                              &trans   &kp ESC    &trans    &trans
            >;
        };

        num_layer {
            display-name = "NUM";
            bindings = <
&kp GRAVE  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT          &kp CARET       &kp N7        &kp N8        &kp N9        &kp N0
&kp DQT    &kp LBKT  &kp LBRC  &kp LPAR  &default_report    &kp LEFT_BRACE  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp RIGHT_BRACE
&kp SQT    &kp RBKT  &kp RBRC  &kp RPAR  &trans             &kp BSLH        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp QMARK
                               &trans    &trans             &trans          &trans
            >;
        };

        func_layer {
            display-name = "FUNC";
            bindings = <
&kp F1           &kp F2       &kp F3           &highlight_line  &kp LC(LA(DEL))    &trans  &trans  &trans  &kp C_MUTE    &kp C_PREV
&kp LA(LS(TAB))  &kp LA(TAB)  &kp LC(LS(TAB))  &kp LC(TAB)      &kp LG(LS(S))      &trans  &trans  &trans  &kp C_VOL_UP  &kp C_PP
&bootloader      &kp F10      &kp F11          &kp F12          &trans             &trans  &trans  &trans  &kp C_VOL_DN  &kp C_NEXT
                                               &trans           &trans             &trans  &trans
            >;
        };

        tri_layer {
            display-name = "TRI";
            bindings = <
&trans  &kp F7  &kp F8  &kp F9     &kp F10       &trans  &trans  &trans  &trans  &trans
&trans  &kp F4  &kp F5  &kp F6     &kp F11       &trans  &trans  &trans  &trans  &trans
&trans  &kp F1  &kp F2  &kp F3     &kp F12       &trans  &trans  &trans  &trans  &trans
                        &kp SPACE  &kp LSHIFT    &trans  &trans
            >;
        };
    };
};
